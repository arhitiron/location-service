input {

  http {
    port => 8080
    type => "healthcheck"
  }

  gelf {
    type => gelf
    port => 12201

    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }

  }

  syslog {
    type => syslog
    port => 25826

    codec => multiline {
      pattern => "^<%{POSINT}>%{SYSLOGTIMESTAMP} %{SYSLOGHOST}\[%{POSINT}\]: %{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }
  }

  tcp {
    type => tcp
    port => 26000

    codec => multiline {
      pattern => "^<%{POSINT}>%{SYSLOGTIMESTAMP} %{SYSLOGHOST}\[%{POSINT}\]: %{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }
  }

  udp {
    type => udp
    port => 27000


    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }

  }
}

filter {

  if [type] == "healthcheck" {
    drop {}
  }

  mutate {
    strip => "message"
  }

  if [type] == "gelf" or [type] == "udp" {

      grok {
        match => {
         "message" => "%{TIMESTAMP_ISO8601:ml_date}(%{SPACE})? %{LOGLEVEL:ml_level} \[%{DATA:ml_corr_service},%{DATA:ml_corr_id},%{DATA:ml_corr_span},%{DATA:ml_corr_zipkin}\] %{INT} --- \[%{DATA:ml_thread}\] %{DATA:ml_classname} : %{GREEDYDATA:ml_message}"
        }
      }

  } else if [type] == "syslog" or [type] == "tcp" {

      grok {
        match => {
          "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname}\[%{POSINT:syslog_pid}\]: %{TIMESTAMP_ISO8601:ml_date}(%{SPACE})? %{LOGLEVEL:ml_level} \[%{DATA:ml_corr_service},%{DATA:ml_corr_id},%{DATA:ml_corr_span},%{DATA:ml_corr_zipkin}\] %{INT} --- \[%{DATA:ml_thread}\] %{DATA:ml_classname} : %{GREEDYDATA:ml_message}"
        }
      }
  }

  if "multiline" in [tags] {
    mutate {
        gsub => [ "message", "<\d+>.*?:\s", ""]
    }
  }

  mutate {
    strip => "ml_thread"
    remove_field => [ "level", "version", "command", "created", "message", "tag", "image_id", "severity", "priority", "facility", "severity_label", "facility_label", "syslog_pri"]
  }

}

output {
  elasticsearch {
      hosts => "elasticsearch"
      ssl => "false"
      user => "logstash_system"
      password => "changeme"
    }
  stdout {
    codec => rubydebug
  }
}